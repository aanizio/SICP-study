1.6)

my own if

(define (x_if predicate then else)
	(cond 	((predicate) then)
		(else)
	)
)

1.7)

(define (new-if predicate then-clause else-clause)
(cond (predicate then-clause)
(else else-clause)))

(define (square x) (* x x))

(define (good-enough? guess x)
(< (abs (- (square guess) x)) 0.0001))

(define (new-good-enough? guess prev_guess x)
  	(< (abs (- guess prev_guess)) 0.001)
	)

(define (average x y)
	(/ (+ x y) 2))

(define (improve guess x)
	(average guess (/ x guess)))

(define (sqrt-iter guess x)
	(if (good-enough? guess x)
		guess
		(sqrt-iter (improve guess x) x))
  )

(define (new-sqrt-iter guess prev_guess x)
	(if (new-good-enough? guess prev_guess x)
		guess
		(new-sqrt-iter (improve guess x) guess x))
  )


(define (improve-cubert guess x)
  	(\ (+ (\ x (square guess)) (* 2 guess))
     	3)
	)

(define (improve-cubert guess x) (average guess (/ x guess)))

(define (cubert-iter guess prev_guess x)
	(if (new-good-enough? guess prev_guess x)
		guess
		(cubert-iter (improve-cubert guess x) guess x))
  )

;; small number
(define _guess 0.00001)
(define _x 0.0005)
;;(new-sqrt-iter _guess (- 1) _x)
;;(sqrt-iter _guess _x)

;; large number
(define _guess 0.00001)
(define _x 10000000000000)
;;(new-sqrt-iter _guess (- 1) _x)
;;(sqrt-iter _guess _x)

;; cube root
1
(cubert-iter 1 (- 1) 27)
